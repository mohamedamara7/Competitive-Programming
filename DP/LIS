We discussed Top down approach in Ranges-Style which was O(N^2) the bottom up idea is if we are at index i and arr[i] is greater than previous elements called M then
LIS[i] equals the greater LIS length for these elements(assume it's index is j) and the par[i] is j. We intialize par array with -1 means the element has no parent to
stop iterating when reaching parent value of -1.

vector<int>arr(n),LIS(n,0),par(n,-1);
LIS[0]=1,par[0]=-1;
int mx_idx=0;
for(int i=1;i<n;i++)
{
    int prev_idx=i;
    for(int j=0;j<i;j++)
    {
        if(arr[i]>arr[j]&&LIS[prev_idx]<LIS[j])
            prev_idx=j;
    }
    LIS[i]=LIS[prev_idx]+1;
    par[i]=(prev_idx==i?-1:prev_idx);
    if(LIS[i]>LIS[mx_idx])
        mx_idx=i;
}
while(mx_idx!=-1)
{
    cout<<arr[mx_idx]<<" ";
    mx_idx=par[mx_idx];
}

2-Using BS in O(n*logn). The idea is: we will create an array with length n called LIS where the index i represents a LIS with length
i+1 and the value represents the best last real index(index of an element in the original array) of a LIS with length i. What does best mean? if we have 2 LIS with length 4
1 2 3 4, 5 6 7 15 the best means we will store the index of 4 not 15 because this will open more options in the feature. And for every element in arr we can make a BS
over LIS to find its position and the condition of BS is arr[i]>arr[LIS[mid]] then l=mid and at the end r will point to its true position in LIS.

vector<int>arr(n),LIS(n),par(n,-1),LISatEachElement(n);
LIS[0]=0,LISatEachElement[0]=1; //index of first element in arr
int cur_len=1;
for(int i=1;i<n;i++)
{
    int l=-1,r=cur_len,mid;
    while(r>l+1)
    {
        mid=(l+r)/2;
        if(arr[i]>arr[LIS[mid]])
            l=mid;
        else
            r=mid;
    }
    par[i]=r==0?-1:LIS[r-1];
    LIS[r]=i;
    LISatEachElement[i]=r+1;
    if(r==cur_len)
        cur_len++;
}
int idx=LIS[cur_len-1];
while(idx!=-1)
{
    cout<<arr[idx]<<" ";
    idx=par[idx];
}

Note:
The previous code calculates LIS before the element(lis[i]=1+maximum lis suitable before) which means the lis of 1 2 3 0 is 1 2 3 1 sometimes we need lis after the 
element for example the result should be 3 2 1 1 we can see that lis in this case is similar to calculate LDS but from the right to left and to calc the LDS we only
need to change the okey function in BS to <.


3-Using segment tree in O(nlogn): There're 2 methods
A: Let a[] be the given array, and d[] be the array defined earlier. Suppose we are at a[i]. What is the LIS that ends with a[i]? The element before the last should be
less than a[i]. Let that element be value. Now at d[value] is the length of the LIS that ends with value. So we should update d[a[i]] with d[value] + 1, if it is 
greater than d[a[i]]. So we search for the maximum d[value] where value is less than a[i]. That is why we can use BIT and segment tree to calculate the maximum on a 
prefix d[minValue;a[i] - 1]. But this method requires space at least O(Max_Value) and we need to handle negative numbers if there's.
https://codeforces.com/contest/340/submission/4386727

B: If we take array elements in an ascending order then using dp array like this dp[i] = answer (i is some position 1 to N) N is the number of elements at input , at 
any step there will be only less than current value at left that already updated. so we call max_query(1 , i-1). So we need to sort and maintain the orginal index
to query from 1 to idx-1.

#include <bits/stdc++.h>
#define fastIO() do {ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); } while (0)
using namespace std;

class SegTree{
private:
    int N;
    vector<int> segT;
    int query(int node,int l,int r,int i,int j)
    {
        if(r<i||l>j)
            return 0;
        if(l>=i&&r<=j)
            return segT[node];
        int mid=l+r>>1;
        return max(query(node<<1,l,mid,i,j),query(node<<1|1,mid+1,r,i,j));
    }
public:
    SegTree(int n)
    {
        N=1;
        while(N<n)
            N<<=1;
        segT=vector<int>(N<<1,0);
    }
    void set(int idx,int val)
    {
        int node=idx+N-1;
        segT[node]=val;
        while(node>1)
        {
            node>>=1;
            segT[node]=max(segT[node<<1],segT[node<<1|1]);
        }
    }
    int query(int i,int j)
    {
        return query(1,1,N,i,j);
    }
};
bool comp(const pair<int,int>& l,const pair<int,int>& r)
{
    if(l.first!=r.first)
        return r.first>l.first;
    return r.second>l.second;
}
int main()
{
    fastIO();
    vector<int> v({4,5,6,2,7,11,3,9,15,17,1,17,17,17});
    int n=v.size();
    vector<pair<int,int>> p(n);
    for(int i=0;i<n;i++)
        p[i]={v[i],i+1};
    sort(p.begin(),p.end(),comp);
    SegTree ST(n);
    unordered_set<int>s;
    for(int i=0;i<n;i++)
    {
        if(s.find(p[i].first)==s.end())
        {
            ST.set(p[i].second,ST.query(1,p[i].second-1)+1);
            s.insert(p[i].first);
        }
    }
    cout<<ST.query(1,n+1);
    return 0;
}


Another example:
https://leetcode.com/problems/count-of-smaller-numbers-after-self/
