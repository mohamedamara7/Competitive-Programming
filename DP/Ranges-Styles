We use dp in minimize ,maximize ,counting and calculating problems.

---Sub(set-sequence) DP(take or leave):
If we have an array: [1 7 2 5 3 9] the anser may be 7 5 3
                     [0 1 0 1 1 0]
-Problems like knapsack or LCS or LIS can be solved using this style. 
-Knapsack solution:
1-Top down:
long long knapsack(int i,int cur_w)
{
    if(cur_w>W)
        return -(1e11)-1;
    if(i==n)
        return 0;
    if(~memo[i][cur_w])
        return memo[i][cur_w];
    return memo[i][cur_w]=max(v[i]+knapsack(i+1,cur_w+w[i]),knapsack(i+1,cur_w));
}
2-Bottom up with O(N^2) space complexity:
long long dp[n][W+1];
memset(dp,0,sizeof(dp));
for(int i=n-1;i>=0;i--)
{
    for(int j=0;j<W+1;j++)
    {
        if(i+1==n)
            dp[i][j]=max(v[i]+static_cast<long long>(j+w[i]>W?-(1e11)-1:0),static_cast<long long>(0));
        else
            dp[i][j]=max(v[i]+static_cast<long long>(j+w[i]>W?-(1e11)-1:dp[i+1][j+w[i]]),dp[i+1][j]);
    }
}
3-Bottom up with O(2*W) space complexity:
long long dp[2][W+1];
//dp[0] cur, dp[1] prev
memset(dp,0,sizeof(dp));
for(int i=n-1;i>=0;i--)
{
    for(int j=0;j<W+1;j++)
    {
        if(i+1==n)
            dp[0][j]=max(v[i]+static_cast<long long>(j+w[i]>W?-(1e11)-1:0),static_cast<long long>(0));
        else
            dp[0][j]=max(v[i]+static_cast<long long>(j+w[i]>W?-(1e11)-1:dp[1][j+w[i]]),dp[1][j]);
    }
    for(int j=0;j<W+1;j++)
    {
        dp[1][j]=dp[0][j];
        dp[0][j]=0;
    }
}
cout<<dp[1][0];
4-Bottom up with O(W) space complexity:
long long dp[W+1];
memset(dp,0,sizeof(dp));
for(int i=n-1;i>=0;i--)
{
    for(int j=0;j<W+1;j++)
    {
        if(i+1==n)
            dp[j]=max(v[i]+static_cast<long long>(j+w[i]>W?-(1e11)-1:0),static_cast<long long>(0));
        else
            dp[j]=max(v[i]+static_cast<long long>(j+w[i]>W?-(1e11)-1:dp[j+w[i]]),dp[j]);
    }
}
cout<<dp[0];


There's another variation of knapsack where the weight is very big so we can't save it in array like: https://atcoder.jp/contests/dp/tasks/dp_e?lang=en
The idea is we will loop on the values where MIN_v<=i<=MAX_v and for every i we will check if there's items which its sum of values equal i and their weights<W(Take or 
leave DP).

#include <bits/stdc++.h>
#define fastIO() do {ios::sync_with_stdio(0);cin.tie(0);cout.tie(0); } while (0)
using namespace std;

int n,w;
int weights[100],values[100];
long long memo[100][100001];
long long dp(int idx,int value)
{
    if(idx>=n)
        return value==0?0:int(1e9)+1;
    if(~memo[idx][value])
        return memo[idx][value];
    return memo[idx][value]=min(weights[idx]+dp(idx+1,value-values[idx]),dp(idx+1,value));
}
int main()
{
    fastIO();
    memset(memo,-1,sizeof memo);
    cin>>n>>w;
    int mn_v=1e3,mx_v=0,mn_w=w;
    for(int i=0;i<n;i++)
    {
        cin>>weights[i]>>values[i];
        mn_v=min(mn_v,values[i]);
        mx_v+=values[i];
    }
    for(int i=mx_v;i>=mn_v;i--)
    {
        long long temp=dp(0,i);
        if(temp<=w)
        {
            cout<<i;
            return 0;
        }
    }
    cout<<0;
    return 0;
}


-In LIS the function parameters are (Cur_idx,prev), prev may be a number or index. if the array contains negative or very big values prev should be an index. If the 
array length is very big we should use prev as a number.

int LIS(int idx,int prev) //calling with LIS(0,INT_MIN)
{
    if(idx==n)
        return 0;
    if(~memo[idx][prev])
        return memo[idx][prev];
    int ans=LIS(idx+1,prev);
    if(prevarr[idx]>=prev)
        ans=max(ans,1+LIS(idx+1,arr[idx]));
    return memo[idx][prev]=ans;
}
To deal with prev as an index here's the solution: https://leetcode.com/problems/longest-increasing-subsequence/submissions/

-In LCS we make take or leave but on 2 strings at the same time. abdc       abc
                                                                 1101       111
so we have 3 choices: 
1-Take Take: when the crosponding characters are the same. 1+dp(i+1,j+1)
if the crosponding characters aren't the same:
2-Take leave: dp(i,j+1)
3-leave Take: dp(i+1,j)

int LCS(int i,int j) //Calling with LCS(0,0)
{
    if(i>=s.size()||j>=t.size())
        return 0;
    if(s[i]==t[j])
        return 1+LCS(i+1,j+1);
    return max(LCS(i,j+1),LCS(i+1,j));
}


-In coins(UVA 147), we can take more than one. 5 10 20 50 100 200 500 1000 2000 5000 10000 
                                               2 4  0  0  0    0   0   0    0    0     0
so we will make a loop to take more than one. We can reduce the complexity of the loop by pushing it to a parameter(we use it when there's a loop in a recursive code
which changing the value of one parameter).

example:
portion of the old code:

int cnt=dp(idx+1,rem),temp=rem;
while(temp-coins[idx]>=0)
{
    cnt+=dp(idx+1,temp-coins[idx]);
    temp-=coins[idx];
}
return memo[idx][rem]=cnt;

after pushing loop to a paremeter:

return memo[idx][rem]=dp(idx+1,rem)+dp(idx,rem-coins[idx]);

We reduce the complexity from O(idx*(max_coins)^2) to O(idx*max_coins).


---Consecutive Ranges Style:
If we have an array of integers or characters and we want to divide it to set of groups according to a certain criteria.
For example abcdefgh the answer may be (abc)(d)(ef)(g)(h). The simple dp approach is to use 2 pointers for detirmining the start and the end for a certain interval
and at each end we decide to expand the interval(adding a new element to it) or to stop it and begin a new one according to the given criteria.
-Solutions to the pearl problem:
1-
int n,cnt[n],pr[n];
int memo[][];
int dp(int cur_idx,int last_idx)
{
    if(cur_idx==n)
        return 0;
    if(~memo[cur_idx][last_idx])
        return memo[cur_idx][last_idx];
    int sum=10;
    for(int i=cur_idx;i<=last_idx;i++)
        sum+=cnt[i];
    //Enough interval
    memo[cur_idx][last_idx]=dp(i+1,j+1)+sum*pr[cur_idx];
    // Add me to current interval
    if(cur_idx!=n-1)
        memo[cur_idx][last_idx]=min(memo[cur_idx][last_idx],dp(i+1,j));
    return memo[cur_idx][last_idx];
}
Time and space complexity of this solution are o(n^3),o(n^2). we can reduce the time complexity by using prefix sum o(1) instead of the loop ,so the complexity
will be o(n^2).

2-
We can carry the sum of the previous interval but will this increase the complexity? no the new prameter depends only on the cur_idx and last_idx and it's constant
for any combination of values for(cur_idx and last_idx) we name it inferenced variable. Is cur_weight in knapsack an inferenced? no for a certain idx its value
may be different because we take or leave elements before the current idx.

int n,cnt[n],pr[n];
int memo[][];
int dp(int cur_idx,int last_idx,int cur_sum=0)
{
    if(cur_idx==n)
        return (cur_idx==last_idx)?0:1e9;
    if(~memo[cur_idx][last_idx])
        return memo[cur_idx][last_idx];
    return memo[cur_idx][last_idx]=min(dp(cur_idx+1,cur_idx+1,0)+(cur_sum+cnt[cur_idx]+10)*pr[cur_idx],dp(cur_idx+1,last_idx,cur_sum+cnt[cur_idx]));
}
// Note that: previousSum is inferenced variable and equals SumRange(i, j). Then we don't memoize it.

3-
Pushing a parameter to loop, to decrease the space complexity. We will fix one pointer and make a loop to move the other one from the starting pointer until reaching 
the end (or certain value according to the criteria).
int n,cnt[n],pr[n];
int memo[];
int dp(int cur_idx)
{
    if(cur_idx==n)
        return 0;
    if(~memo[cur_idx][last_idx])
        return memo[cur_idx];
    int sum=0,mn=INT_MAX;
    for(int j=cur_idx;j<n;j++)
    {
        sum+=cnt[cur_idx];
        mn=min(mn,dp(j+1)+(10+sum)*pr[cur_idx]);
    }
    return memo[cur_idx]=mn;
}
Time and space complexity of this solution are o(n^2),o(n) efficient for memory.


---Nested Ranges Style:
We need to divide the input to nested ranges. For example abcdefgh the answer may be ((((a)b)(c))(((d)(e))(f(g)h))). We want to pair ranges in a certain style. 
Intuitive solution is to solve it bottom up ab then adding c to it and so on. Althoug the best method is to solve it top down. For example we can try
(abcde)(fgh) then (a(bcd)e)(f(gh)) and so on.
-Problems like Burst Balloons, MCM can be solved using this style.
-In Burst Balloons rather we pop a balloon first then pop left and right ranges, we pop it last which means we pop left and right ranges first.
https://www.youtube.com/watch?v=VFskby7lUbw&ab_channel=NeetCode

class Solution {
public:
    vector<int> v;
    int memo[302][302];
    int sol(int l,int r)
    {
        if(l==r)
            return v[l]*v[l-1]*v[l+1];
        if(~memo[l][r])
            return memo[l][r];
        int mx=0;
        for(int i=l;i<=r;i++)
        {
            mx=max(mx,sol(l,i-1)+sol(i+1,r)+v[i]*v[l-1]*v[r+1]);
        }
        return memo[l][r]=mx;
    }
    int maxCoins(vector<int>& nums) {
        v.push_back(1);
        v.insert(v.end(),nums.begin(),nums.end());
        v.push_back(1);
        memset(memo,-1,sizeof memo);
        return sol(1,v.size()-2);
    }
};
-In MCM we split a sequence into 2 intervals.

int arr[10][10];
long long memo[11][11];
long long dp(int l,int r)
{
    if(l==r)
        return 0;
    if(~memo[l][r])
        return memo[l][r];
    long long mn=LONG_MAX;
    for(int i=l;i<r;i++)
        mn=min(mn,dp(l,i)+dp(i+1,r)+arr[l][0]*arr[i][1]*arr[r][1]);
    return memo[l][r]=mn;
}
void trace(int l,int r)
{
    if(l==r)
    {
        cout<<'A'<<l+1;
        return;
    }
    for(int i=l;i<r;i++)
        if(dp(l,r)==dp(l,i)+dp(i+1,r)+arr[l][0]*arr[i][1]*arr[r][1])
        {
            if(i-l>=1)
                cout<<'(';
            trace(l,i);
            if(i-l>=1)
                cout<<')';
            cout<<" x ";
            if(r-i>=2)
                cout<<'(';
            trace(i+1,r);
            if(r-i>=2)
                cout<<')';
            return;
        }
}

-Cutting sticks problem:

int n,k,splits[50],memo[1000][1000];
int dp(int l,int r)
{
    if(l>r)
        return 0;
    if(~memo[l][r])
        return memo[l][r];
    int mn=INT_MAX;
    for(int i=0;i<k;i++)
        if(splits[i]>=l&&splits[i]<r)
            mn=min(mn,dp(l,splits[i])+dp(splits[i]+1,r)+r-l+1);
    return memo[l][r]=(mn==INT_MAX?0:mn);
}

Finally, nested range style is used when we want to determine the order of doing something(burst ballons, multiplication of arrays, cutting stick).
