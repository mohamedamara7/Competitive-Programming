-An array or string can be sorted in o(n*logn) or in o(n) using frequency array.
-The number of subsequences is 2^N and the number of subarrays is N*(N+1)/2.

-If we hava a segment [L-R] sometimes we need to store a certain value in it we can loop from l to r but if we have N segments this might take O(N^2) and give TLE.
There's a trick to avoid TLE by putting seg[l]+=val,seg[r+1]+= -val and after the queries we can loop over the full and editing it.
int cnt=0;
for(int i=0;i<n;i++)
  arr[i]+=cnt;
  cnt+=arr[i];
it's the same as applying prefix sum on the new array.

-If we have a set of numbers and we want to have 2 numbers l1,l2 such that l1+l2=k we can find this 2 numbers in linear time by using a data structure that searches in 
a constant time and loop over the set and at each number we will search for (k-num) in the data structure, we also can iterate until k/2 but now we should search for both
idx,k-idx. we may use unordered set or map or even a boolean vector. Some times the numbers are sorted incresingly and we want l2-l1 to be minimize so we should loop from
the idx=size/2 to 0 (not the opposite).

-If we are calculating something for a subarray prefix sum is a common technique so think in it first. Sometimes we can convert O(N^2) of a prefix sum that count something
to O(N) using an unordered map and the following relation: SubarraySum[l..r]=pref[r]-pref[l-1]
https://leetcode.com/problems/subarray-sum-equals-k/
https://leetcode.com/problems/subarray-sums-divisible-by-k/

-Sometimes we can reduce the complixety of dp solution for divisiblity problem by make use of pigeonhole principle
The idea: https://www.youtube.com/watch?v=2leHFuMKr9o&ab_channel=MathXpress
An example: https://codeforces.com/contest/577/problem/B

-If we need to memomize a bool state:
  1-In top down we can use an int memo or bool memo of a pair first for the answer and the second to check if it's visited before or note
    https://codeforces.com/contest/577/submission/173518212
  2-In bottom up we can use directly a bool table
    https://codeforces.com/contest/577/submission/173519569

